#!/usr/bin/env bash

# Bash 配置测试 - 使用共享库重构
# 兼容 POSIX shell (bash 4+/zsh 5+) 和 macOS (Intel/Apple Silicon)

# # 获取脚本目录的绝对路径
# SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# # 导入测试工具函数
# source "$PROJECT_ROOT/app/test_utils.sh"

# 初始化测试环境
init_test_env "$(basename "$(dirname "$0")")"

show_test "Bash 配置测试开始"

# 测试 bash 是否可用
check_command "bash" "bash" "检查 bash 是否安装"

# 测试 motd 文件是否存在
check_file "/etc/motd" "检查 motd 文件是否存在"

# 测试 motd 文件权限
check_readable "/etc/motd" "检查 motd 文件是否可读"

# 测试 bash_profile 配置
if [[ -f ~/.bash_profile ]]; then
    show_test "检查 bash_profile 配置"

    # 检查基本环境变量设置
    check_file_contains "$HOME/.bash_profile" "CLICOLOR" "检查 CLICOLOR 环境变量设置"
    check_file_contains "$HOME/.bash_profile" "LSCOLORS" "检查 LSCOLORS 环境变量设置"

    # 检查 PS1 提示符设置
    check_file_contains "$HOME/.bash_profile" "PS1" "检查 PS1 提示符设置"

    show_success "bash_profile 配置检查通过"
else
    show_warning "bash_profile 文件不存在，这可能是正常的（如果主要使用 zsh）"
fi

# 运行 POSIX 兼容性测试
run_posix_compatibility_tests "bash"

# 运行 macOS 兼容性测试
run_macos_compatibility_tests "bash"

# 测试 motd 内容显示
show_test "测试 motd 内容"
if [[ -f /etc/motd ]]; then
    # 检查 motd 文件是否有内容
    if [[ -s /etc/motd ]]; then
        show_success "motd 文件包含内容"

        # 显示 motd 内容的前几行作为验证
        echo "motd 内容预览:"
        head -n 3 /etc/motd | sed 's/^/  /'
    else
        show_warning "motd 文件为空"
    fi
else
    show_warning "motd 文件不存在"
fi

test_summary "Bash 配置测试"
