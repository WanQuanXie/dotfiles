#!/usr/bin/env bash

echo "正在设置 GPG 密钥..."

# 创建临时批处理文件用于 GPG 密钥生成
cat > /tmp/gpg-batch << EOF
%echo 正在生成 GPG 密钥
Key-Type: RSA
Key-Length: 4096
Subkey-Type: RSA
Subkey-Length: 4096
Name-Real: WanQuanXie
Name-Email: i2cherry941219@gmail.com
Expire-Date: 0
%no-protection
%commit
%echo 完成
EOF

# 使用批处理文件生成密钥
gpg --batch --generate-key /tmp/gpg-batch

# 清理临时批处理文件
rm /tmp/gpg-batch

# 获取长格式的密钥 ID
KEY_ID=$(gpg --list-secret-keys --keyid-format=long | grep -E "^sec" | head -n 1 | sed -E 's/.*\/([A-F0-9]+) .*/\1/')

if [ -z "$KEY_ID" ]; then
    echo "错误：无法提取 GPG 密钥 ID"
    exit 1
fi

echo "GPG 密钥生成成功！"
echo "密钥 ID: $KEY_ID"
echo ""

# 显示密钥信息
echo "GPG 密钥详情："
gpg --list-secret-keys --keyid-format=long

# 导出公钥
echo ""
echo "GPG 公钥（添加到 GitHub）："
echo ""
gpg --armor --export $KEY_ID

# 配置 Git 使用生成的 GPG 密钥
echo ""
echo "正在配置 Git 使用 GPG 签名..."

# 设置 Git 使用的 GPG 密钥
git config --global user.signingkey $KEY_ID

# 启用 Git 提交和标记签名
git config --global commit.gpgsign true
git config --global tag.gpgSign true

# 设置 GPG 程序路径（针对不同操作系统）
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS 系统
    if command -v gpg > /dev/null; then
        GPG_PROGRAM=$(which gpg)
        git config --global gpg.program "$GPG_PROGRAM"
    fi
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux 系统
    if command -v gpg > /dev/null; then
        GPG_PROGRAM=$(which gpg)
        git config --global gpg.program "$GPG_PROGRAM"
    fi
fi

# 验证 Git GPG 配置
echo ""
echo "验证 Git GPG 配置："
echo "签名密钥: $(git config --global user.signingkey)"
echo "自动签名: $(git config --global commit.gpgsign)"
echo "GPG 程序: $(git config --global gpg.program)"

# 检查配置是否成功
if [[ "$(git config --global user.signingkey)" == "$KEY_ID" && "$(git config --global commit.gpgsign)" == "true" ]]; then
    echo ""
    echo "✅ Git GPG 签名配置成功！"
else
    echo ""
    echo "❌ Git GPG 签名配置可能有问题，请检查上述输出。"
fi

echo ""
echo "GPG 密钥已生成。请将其添加到您的 GitHub 账户："
echo "https://github.com/settings/gpg/new"

# 提示用户测试签名
echo ""
echo "===== GPG 签名验证指南 ====="
echo "1. 执行以下命令测试 GPG 签名："
echo "   echo 'test' | git commit-tree HEAD^{tree} -S"
echo ""
echo "2. 上述命令会返回一个提交哈希值（如 a1b2c3d4...）"
echo ""
echo "3. 使用以下命令验证该提交的签名："
echo "   git verify-commit 上一步返回的哈希值"
echo ""
echo "4. 成功的验证结果应该包含以下内容："
echo "   - \"Good signature from \\\"WanQuanXie <i2cherry941219@gmail.com>\\\"\""
echo "   - 您的 GPG 密钥 ID（$KEY_ID）"
echo ""
echo "5. 如果看到类似以下输出，则表示签名验证成功："
echo "   ------------------------------------------------"
echo "   gpg: Signature made 日期时间"
echo "   gpg:                using RSA key 您的密钥ID"
echo "   gpg: Good signature from \"WanQuanXie <i2cherry941219@gmail.com>\" [ultimate]"
echo "   ------------------------------------------------"
echo ""
echo "6. 如果看到 \"BAD signature\" 或其他错误信息，则表示 GPG 签名配置可能有问题"
echo ""
echo "注意：首次使用 GPG 签名时，可能会弹出密钥管理器或 GPG 代理请求访问密钥的对话框，这是正常现象"