#!/usr/bin/env bash

# 集成测试脚本 - 使用共享库重构
# 兼容 POSIX shell (bash 4+/zsh 5+) 和 macOS (Intel/Apple Silicon)

# 加载共享库
# shellcheck source=./lib/common.sh
source "./lib/common.sh"

# 初始化测试环境
init_test_env "integration_test"

# 运行单个应用测试
run_app_test() {
    local app=$1

    if [ -f "./app/$app/test" ]; then
        show_test "运行 $app 测试"
        if bash "./app/$app/test"; then
            show_success "$app 测试通过"
        else
            show_error "$app 测试失败"
        fi
    else
        show_warning "$app 没有测试脚本"
    fi
}

# 主系统测试
show_group "系统配置测试"
bash ./test || show_error "系统配置测试失败"
show_success "系统配置测试通过"

# 应用测试
show_group "应用测试"

# 第1组：基础工具
show_info "基础工具测试"
for app in zsh git ssh gpg; do
    run_app_test "$app"
done

# 第2组：语言环境
show_info "语言环境测试"
for app in go rust ruby java node; do
    run_app_test "$app"
done

# 第3组：开发工具
show_info "开发工具测试"
for app in vim nvim tmux fzf VSCode; do
    run_app_test "$app"
done

# 生成测试报告
show_group "测试报告"
show_info "测试完成时间: $(date)"

# 系统兼容性测试
show_group "系统兼容性测试"

# 运行系统兼容性测试
run_macos_compatibility_tests "integration_test"

# Shell 兼容性测试
run_posix_compatibility_tests "integration_test"

# 集成功能测试
show_group "集成功能测试"

# Git 和 GPG 集成测试
show_test "Git 和 GPG 集成测试"
if command -v git >/dev/null 2>&1 && command -v gpg >/dev/null 2>&1; then
    GPG_KEY=$(git config --global --get user.signingkey 2>/dev/null || echo "")
    if [[ -n "$GPG_KEY" ]]; then
        if gpg --list-secret-keys "$GPG_KEY" >/dev/null 2>&1; then
            show_success "Git 和 GPG 集成正常"
        else
            show_warning "GPG 密钥配置但不可用"
        fi
    else
        show_warning "Git GPG 签名未配置"
    fi
else
    show_warning "Git 或 GPG 未安装"
fi

# Shell 和工具集成测试
show_test "Shell 和工具集成测试"
if [[ -f ~/.zshrc ]]; then
    # 检查 FZF 集成
    if grep -q "fzf" ~/.zshrc && command -v fzf >/dev/null 2>&1; then
        show_success "FZF 和 Zsh 集成正常"
    fi

    # 检查语法高亮集成
    if grep -q "zsh-syntax-highlighting" ~/.zshrc; then
        show_success "Zsh 语法高亮集成正常"
    fi
fi

# 性能测试
show_group "性能测试"

# Shell 启动性能测试
show_test "Shell 启动性能测试"
if command -v zsh >/dev/null 2>&1; then
    START_TIME=$(date +%s%N)
    timeout 10 zsh -i -c exit 2>/dev/null || true
    END_TIME=$(date +%s%N)
    STARTUP_TIME=$(( (END_TIME - START_TIME) / 1000000 ))
    show_info "Zsh 启动时间: ${STARTUP_TIME}ms"

    if [[ $STARTUP_TIME -lt 1000 ]]; then
        show_success "Shell 启动性能良好"
    elif [[ $STARTUP_TIME -lt 2000 ]]; then
        show_warning "Shell 启动稍慢 (${STARTUP_TIME}ms)"
    else
        show_warning "Shell 启动较慢 (${STARTUP_TIME}ms)，建议优化"
    fi
fi

show_success "集成测试完成"